var L=Object.defineProperty;var D=(o,n,a)=>n in o?L(o,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):o[n]=a;var r=(o,n,a)=>(D(o,typeof n!="symbol"?n+"":n,a),a);import{L as h,a as P,D as S,b}from"./consts-a14090c0.js";import{S as k,R as v,D as T,V as f,a as i,b as s,P as m,M as g,g as E,c as I}from"./simplePeer-35b4a08a.js";const w=globalThis.livekitServerSDK.AccessToken;function A(o,n,a){const c=new w(o,n,{identity:a,ttl:86400});return c.addGrant({room:a,roomJoin:!0,roomCreate:!0,roomAdmin:!0,roomList:!0,canPublish:!0,canSubscribe:!1,canPublishData:!0}),c.toJwt()}let d=null;const U=o=>(d=new k(C,n=>console.log("SIMPLEPEER new conn state:",n),n=>{M(new Uint8Array(n))}),d.start({initiator:!1,trickle:!1,streams:[o]}),d),K=o=>{d&&d.handleSignalingMsg(o)};function C(o){let n=new Uint8Array(o);!n||n.length===0||(console.log("GOT DC DATA:",n),K(n))}class y{constructor(n,a,c){r(this,"roomId");r(this,"hostUrl");r(this,"accessToken");r(this,"roomConn");r(this,"videoElem");r(this,"onMesssageRecived");r(this,"onConnStateChange");this.hostUrl=n,this.onMesssageRecived=e=>a(e,this.roomId,this.hostUrl),this.onConnStateChange=e=>c(e,this.roomId,this.hostUrl),this.roomConn=new v({reconnectPolicy:new T,dynacast:!0,videoCaptureDefaults:{resolution:f.h1080.resolution},publishDefaults:{videoCodec:"h264"}})}async start(n,a){console.log(`Starting conn with ${n} via ${this.hostUrl} token = ${a}`);const c=Date.now();return this.roomId=n,this.roomConn.on(i.SignalConnected,async()=>{const e=Date.now()-c;s(`signal connection established in ${e}ms`);let t=await this.roomConn.localParticipant.setCameraEnabled(!0);console.log("camResult:",t)}).on(i.Connected,async()=>{s(`Connected to room: ${this.roomConn.name}`)}).on(i.Disconnected,e=>{this.roomConn&&(s("disconnected from room",{reason:e},this.roomConn.localParticipant),this.roomConn.participants.forEach(t=>{}))}).on(i.Reconnecting,()=>{s("Reconnecting to room")}).on(i.Reconnected,async()=>{s("Successfully reconnected. server",await this.roomConn.engine.getConnectedServerAddress())}).on(i.ParticipantConnected,async e=>{s("participant",e.identity,"connected",e.metadata),e.on(m.TrackMuted,t=>{s("track was muted",t.trackSid,e.identity)}).on(m.TrackUnmuted,t=>{s("track was unmuted",t.trackSid,e.identity)}).on(m.IsSpeakingChanged,()=>{s("ParticipantEvent.IsSpeakingChanged",e.isSpeaking)}).on(m.ConnectionQualityChanged,()=>{s("ParticipantEvent.ConnectionQualityChanged",e.connectionQuality)})}).on(i.ParticipantDisconnected,e=>{s("participant",e.sid,"disconnected")}).on(i.MediaDevicesError,e=>{const t=g.getFailure(e);s("media device failure",t)}).on(i.ConnectionQualityChanged,(e,t)=>{s("connection quality changed",t==null?void 0:t.identity,e)}).on(i.DataReceived,async(e,t)=>{const u=t?t.identity:"SERVER";s(`Got dataReceived from ${u} via ${this.hostUrl}|${this.roomId}`,S(e)),this.onMesssageRecived(e,this.roomId,this.hostUrl)}).on(i.RoomMetadataChanged,e=>{s("new metadata for room",e)}).on(i.MediaDevicesChanged,()=>{s("MediaDevicesChanged")}).on(i.LocalTrackUnpublished,(e,t)=>{s("LocalTrackUnpublished!!!?",e,t)}).on(i.LocalTrackPublished,(e,t)=>{s("LocalVideoTrackPublished ",e,t)}).on(i.MediaDevicesError,e=>{const t=g.getFailure(e);s("media device failure",t)}).on(i.ConnectionQualityChanged,(e,t)=>{s("connection quality changed",t==null?void 0:t.identity,e)}).on(i.TrackSubscribed,(e,t,u)=>{s("subscribed to track _THIS SHOULDN'T HAPPEN on BACKEND??_",t.trackSid,u.identity)}).on(i.TrackUnsubscribed,(e,t,u)=>{s("unsubscribed from track _THIS SHOULDN'T HAPPEN on BACKEND??_",t.trackSid)}).on(i.AudioPlaybackStatusChanged,()=>{s("AudioPlaybackStatusChanged _THIS SHOULDN'T HAPPEN on BACKEND??_",this.roomConn.canPlaybackAudio)}),await this.roomConn.connect(E(this.hostUrl),a,b),console.info("connected to room",this.roomConn.name,this.roomConn),!0}sendMessage(n,a,c=!1){console.log("sendMessage() to driver/spectator ",n),this.roomConn.localParticipant.publishData(n,I.RELIABLE)}close(){console.info("Closing Livekit Connection: ",this.roomId,this.hostUrl),this.roomConn&&this.roomConn.disconnect(!0)}}const R=new y(h,(o,n,a)=>{C(o)},(o,n,a)=>{console.log("Cloud Conn State Changed: "+o,n,a)});new y(P,(o,n,a)=>{C(o)},(o,n,a)=>{console.log("Local Conn State Changed: "+o,n,a)});async function N(o){if(!o.CloudAPIKey||!o.CloudSecretKey||!o.RovRoomName)throw new Error("Missing some required livekit setup url query params.");o.ForceLocal?P:h;{const n=A(o.CloudAPIKey,o.CloudSecretKey,o.RovRoomName),a=new RoomServiceClient(h,o.CloudAPIKey,o.CloudSecretKey);await createLivekitRoom(a,o.RovRoomName),await refreshMetadata(a,o),await R.start(o.RovRoomName,n);let c=await listLivekitRooms(a);console.log("cloud roomList",c)}return!0}function M(o){R.sendMessage(o)}const l=new URLSearchParams(location.search);N({ForceLocal:(l.get("ForceLocal")||"").toLowerCase()==="true",RovRoomName:l.get("RovRoomName"),CloudAPIKey:l.get("CloudAPIKey"),CloudSecretKey:l.get("CloudSecretKey"),LocalAPIKey:l.get("LocalAPIKey"),LocalSecretKey:l.get("LocalSecretKey")}).then(async()=>{console.log("connected?");const o=await navigator.mediaDevices.getUserMedia({video:!0,audio:!1});U(o)});
//# sourceMappingURL=backend-09a7f4f9.js.map
