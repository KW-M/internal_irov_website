{"version":3,"file":"backend-09a7f4f9.js","sources":["../../js/livekit/livekitTokens.ts","../../backend/js/simplePeerPub.ts","../../backend/js/msgHandler.ts","../../backend/js/livekitPublisher.ts","../../backend/js/main.js"],"sourcesContent":["\nimport '../nodeShimsBundle'\nimport type * as livekitServerSDKTypes from 'livekit-server-sdk';\nconst AccessToken = globalThis.livekitServerSDK.AccessToken as typeof livekitServerSDKTypes.AccessToken\n\n/**\n * Get a livekit auth token that's valid for 24 hrs and allows all actions.\n * @param apiKey livekit api key to use\n * @param secretKey livekit api secret key to use\n * @param rovName the room name & user identity to use.\n * @returns {string} JWT access token\n */\nexport function getPublisherAccessToken(apiKey: string, secretKey: string, rovName: string): string {\n    const token = new AccessToken(apiKey, secretKey, {\n        identity: rovName,\n        ttl: 86400, // (seconds in 24hrs),\n    })\n    token.addGrant({\n        room: rovName,\n        roomJoin: true,\n        roomCreate: true,\n        roomAdmin: true,\n        roomList: true,\n        canPublish: true,\n        canSubscribe: false,\n        canPublishData: true,\n    });\n    return token.toJwt();\n}\n\n/**\n * Get a livekit auth token that's valid for 24 hrs and allows joining rooms but not broadcasting video.\n * @param {string} apiKey livekit api key to use\n * @param {string} secretKey livekit api secret key to use\n * @param {string} roomName livekit room name that this user will be allowed to join\n * @param {string} userName  user name & identity that this user will get when joining the room / using livekit.\n * @returns {string} JWT access token */\nexport function getFrontendAccessToken(apiKey: string, secretKey: string, roomName: string, userName: string) {\n    const token = new AccessToken(apiKey, secretKey, {\n        identity: userName,\n        name: userName,\n        ttl: 21600 // 6 hours in seconds,\n    })\n    token.addGrant({\n        room: roomName,\n        roomList: true,\n        roomJoin: true,\n        canPublish: true, // CHANGE this to false\n        canSubscribe: true,\n        canPublishData: true,\n    });\n    return token.toJwt();\n}\n\n/**\n * Get a livekit server auth token that's valid for hundreds of years, but only has the ability to list open rooms.\n * @param {string} apiKey livekit api key to use\n * @param {string} secretKey livekit api secret key to use\n * @returns {string} JWT token */\nexport function getLongTermStarterAccessToken(apiKey: string, secretKey: string): string {\n    const token = new AccessToken(apiKey, secretKey, {\n        identity: 'lt',\n        ttl: 9460800000 // 300 years\n    })\n    token.addGrant({\n        roomList: true,\n        roomJoin: false,\n        canPublish: false,\n        canSubscribe: false,\n        canPublishData: false,\n    });\n    return token.toJwt();\n}\n","import { SimplePeerConnection } from \"../../js/simplePeer\"\nimport { handleBackendMsgRcvd } from \"./msgHandler\"\nimport { sendLivekitMessage } from \"./livekitPublisher\"\n\n\nlet simplePeerPub: SimplePeerConnection | null = null;\nexport const initSimplePeerPublisher = (mediaStream: MediaStream): SimplePeerConnection => {\n    // if (simplePeerPub) simplePeerPub.stop()\n    simplePeerPub = new SimplePeerConnection(handleBackendMsgRcvd, (newState: string) => console.log(\"SIMPLEPEER new conn state:\", newState), (signalData) => {\n        sendLivekitMessage(new Uint8Array(signalData))\n    })\n    simplePeerPub.start({\n        initiator: false,\n        trickle: false,\n        streams: [mediaStream]\n    })\n    return simplePeerPub;\n}\n\nexport const sendSignalingDataToSimplePeerPublisher = (signalData: Uint8Array) => {\n    if (simplePeerPub) simplePeerPub.handleSignalingMsg(signalData);\n}\n","import { receiveProxiedMsg } from \"../../js/proxyReciever\";\nimport { sendSignalingDataToSimplePeerPublisher } from \"./simplePeerPub\";\n\nexport function handleBackendMsgRcvd(msgBytes: ArrayBufferLike) {\n    let data = new Uint8Array(msgBytes)\n    if (!data || data.length === 0) return;\n    console.log(\"GOT DC DATA:\", data);\n    sendSignalingDataToSimplePeerPublisher(data);\n    // receiveProxiedMsg(msgBytes);\n}\n","import {\n    Room,\n    RoomEvent,\n    RemoteParticipant,\n    RemoteTrackPublication,\n    RemoteTrack,\n    Participant,\n    VideoPresets,\n    DefaultReconnectPolicy,\n    RoomConnectOptions,\n    LivekitError,\n    LocalTrackPublication,\n    LocalParticipant,\n    LocalAudioTrack,\n    MediaDeviceFailure,\n    ConnectionQuality,\n    ParticipantEvent,\n    TrackPublication,\n    DisconnectReason,\n    DataPacket_Kind\n} from 'livekit-client';\n\nexport type LivekitSetupOptions = {\n    ForceLocal: boolean,\n    RovRoomName: string,\n    CloudSecretKey: string,\n    CloudAPIKey: string,\n    LocalSecretKey: string,\n    LocalAPIKey: string\n}\n\nimport { LIVEKIT_CLOUD_ENDPOINT, LIVEKIT_LOCAL_ENDPOINT, LIVEKIT_BACKEND_ROOM_CONNECTION_CONFIG, DECODE_TXT, ENCODE_TXT, PROXY_PREFIX } from '../../js/consts';\nimport { appendLog, getWebsocketURL, waitfor } from '../../js/util';\nimport { getFrontendAccessToken, getPublisherAccessToken } from '../../js/livekit/livekitTokens';\nimport { setSendProxyMessageCallback } from '../../js/proxyReciever';\nimport { handleBackendMsgRcvd } from './msgHandler'\n// const RoomServiceClient = globalThis.livekitServerSDK.RoomServiceClient as typeof livekitServerSDKTypes.RoomServiceClient\n\ntype msgQueueItem = { msgBytes: Uint8Array, onSendCallback: (msgBytes: Uint8Array) => void }\ntype MsgRecivedCallback = (msg: Uint8Array, roomId: string, hostUrl: string) => void;\ntype StateChangeCallback = (connState: string, roomId: string, hostUrl: string) => void;\n\nexport class LivekitPublisherConnection {\n    roomId: string;\n    hostUrl: string;\n    accessToken: string;\n    roomConn: Room;\n    videoElem: Element;\n\n    onMesssageRecived: MsgRecivedCallback;\n    onConnStateChange: StateChangeCallback;\n\n    constructor(hostUrl: string, onMesssageRecived: MsgRecivedCallback, onConnStateChange: StateChangeCallback) {\n        this.hostUrl = hostUrl;\n        this.onMesssageRecived = (msg: Uint8Array) => onMesssageRecived(msg, this.roomId, this.hostUrl);\n        this.onConnStateChange = (connState: string) => onConnStateChange(connState, this.roomId, this.hostUrl);\n\n        // creates a new room object with options\n        this.roomConn = new Room({\n\n            // specify how offten to retry connection when it fails.\n            reconnectPolicy: new DefaultReconnectPolicy(),\n\n            // optimize publishing bandwidth and CPU for published tracks\n            dynacast: true,\n\n            // default capture settings\n            videoCaptureDefaults: {\n                resolution: VideoPresets.h1080.resolution,\n                // facingMode: 'environment',\n                // deviceId: //get device id beforehand\n            },\n\n            publishDefaults: {\n                videoCodec: \"h264\",\n            },\n\n        });\n    }\n\n    async start(roomId: string, accessToken: string) {\n        console.log(`Starting conn with ${roomId} via ${this.hostUrl} token = ${accessToken}`)\n        const startTime = Date.now();\n        this.roomId = roomId;\n\n        // set up event listeners\n        this.roomConn\n            .on(RoomEvent.SignalConnected, async () => { // DIFF\n                const signalConnectionTime = Date.now() - startTime;\n                appendLog(`signal connection established in ${signalConnectionTime}ms`);\n                let camResult = await this.roomConn.localParticipant.setCameraEnabled(true);\n                console.log(`camResult:`, camResult)\n            })\n            .on(RoomEvent.Connected, async () => {\n                appendLog(`Connected to room: ${this.roomConn.name}`)\n            })\n            .on(RoomEvent.Disconnected, (reason?: DisconnectReason) => {\n                if (!this.roomConn) return;\n                appendLog('disconnected from room', { reason }, this.roomConn.localParticipant);\n                this.roomConn.participants.forEach((p) => { });\n            })\n            .on(RoomEvent.Reconnecting, () => {\n                appendLog('Reconnecting to room')\n            })\n            .on(RoomEvent.Reconnected, async () => {\n                appendLog(\n                    'Successfully reconnected. server',\n                    await this.roomConn.engine.getConnectedServerAddress(),\n                );\n            })\n            .on(RoomEvent.ParticipantConnected, async (participant: Participant) => {\n                appendLog('participant', participant.identity, 'connected', participant.metadata);\n                participant\n                    .on(ParticipantEvent.TrackMuted, (pub: TrackPublication) => {\n                        appendLog('track was muted', pub.trackSid, participant.identity);\n                    })\n                    .on(ParticipantEvent.TrackUnmuted, (pub: TrackPublication) => {\n                        appendLog('track was unmuted', pub.trackSid, participant.identity);\n                    })\n                    .on(ParticipantEvent.IsSpeakingChanged, () => {\n                        appendLog('ParticipantEvent.IsSpeakingChanged', participant.isSpeaking);\n                    })\n                    .on(ParticipantEvent.ConnectionQualityChanged, () => {\n                        appendLog('ParticipantEvent.ConnectionQualityChanged', participant.connectionQuality);\n                    });\n            })\n            .on(RoomEvent.ParticipantDisconnected, (participant: RemoteParticipant) => {\n                appendLog('participant', participant.sid, 'disconnected');\n            })\n            .on(RoomEvent.MediaDevicesError, (e: Error) => {\n                const failure = MediaDeviceFailure.getFailure(e);\n                appendLog('media device failure', failure);\n            })\n            .on(RoomEvent.ConnectionQualityChanged, (quality: ConnectionQuality, participant?: Participant) => {\n                appendLog('connection quality changed', participant?.identity, quality);\n            })\n            .on(RoomEvent.DataReceived, async (msg: Uint8Array, participant?: RemoteParticipant) => {\n                const person = participant ? participant.identity : \"SERVER\";\n                appendLog(`Got dataReceived from ${person} via ${this.hostUrl}|${this.roomId}`, DECODE_TXT(msg));\n                this.onMesssageRecived(msg, this.roomId, this.hostUrl)\n            })\n            .on(RoomEvent.RoomMetadataChanged, (metadata) => {\n                appendLog('new metadata for room', metadata);\n            })\n            .on(RoomEvent.MediaDevicesChanged, () => {\n                appendLog('MediaDevicesChanged');\n            })\n            .on(RoomEvent.LocalTrackUnpublished, (track: LocalTrackPublication, participant: LocalParticipant) => {\n                appendLog(\"LocalTrackUnpublished!!!?\", track, participant)\n            })\n            .on(RoomEvent.LocalTrackPublished, (track: LocalTrackPublication, participant: LocalParticipant) => {\n                appendLog('LocalVideoTrackPublished ', track, participant)\n            })\n            .on(RoomEvent.MediaDevicesError, (e: Error) => {\n                const failure = MediaDeviceFailure.getFailure(e);\n                appendLog('media device failure', failure);\n            })\n            .on(RoomEvent.ConnectionQualityChanged, (quality: ConnectionQuality, participant?: Participant) => {\n                appendLog('connection quality changed', participant?.identity, quality);\n            })\n            .on(RoomEvent.TrackSubscribed, (track, pub, participant) => {\n                // DIFF\n                appendLog('subscribed to track _THIS SHOULDN\\'T HAPPEN on BACKEND??_', pub.trackSid, participant.identity);\n            })\n            .on(RoomEvent.TrackUnsubscribed, (_, pub, participant) => {\n                // DIFF\n                appendLog('unsubscribed from track _THIS SHOULDN\\'T HAPPEN on BACKEND??_', pub.trackSid);\n            })\n            .on(RoomEvent.AudioPlaybackStatusChanged, () => {\n                appendLog('AudioPlaybackStatusChanged _THIS SHOULDN\\'T HAPPEN on BACKEND??_', this.roomConn.canPlaybackAudio);\n            })\n\n        // DIFF\n        await this.roomConn.connect(getWebsocketURL(this.hostUrl), accessToken, LIVEKIT_BACKEND_ROOM_CONNECTION_CONFIG); // local: 'ws://localhost:7800',\n        console.info('connected to room', this.roomConn.name, this.roomConn);\n\n        return true;\n    }\n\n    sendMessage(msgBytes: Uint8Array, onSendCallback?: () => void, skipQueue = false) {\n        console.log(\"sendMessage() to driver/spectator \", msgBytes)\n        this.roomConn.localParticipant.publishData(msgBytes, DataPacket_Kind.RELIABLE)\n    }\n\n    close() {\n        console.info(\"Closing Livekit Connection: \", this.roomId, this.hostUrl);\n        if (this.roomConn) {\n            this.roomConn.disconnect(true);\n        }\n    }\n}\n\n\n\nexport const cloudLivekitConnection = new LivekitPublisherConnection(LIVEKIT_CLOUD_ENDPOINT, (msg, roomId, hostUrl) => {\n    handleBackendMsgRcvd(msg)\n}, (state, roomId, hostUrl) => {\n    console.log(\"Cloud Conn State Changed: \" + state, roomId, hostUrl)\n})\n\n\nexport const localLivekitConnection = new LivekitPublisherConnection(LIVEKIT_LOCAL_ENDPOINT, (msg, roomId, hostUrl) => {\n    handleBackendMsgRcvd(msg)\n}, (state, roomId, hostUrl) => {\n    console.log(\"Local Conn State Changed: \" + state, roomId, hostUrl)\n})\n\nexport async function connectToLivekit(livekitSetup: LivekitSetupOptions): Promise<boolean> {\n    if (!livekitSetup.CloudAPIKey || !livekitSetup.CloudSecretKey || !livekitSetup.RovRoomName) throw new Error(\"Missing some required livekit setup url query params.\");\n    const livekitUrlEndpoint = livekitSetup.ForceLocal ? LIVEKIT_LOCAL_ENDPOINT : LIVEKIT_CLOUD_ENDPOINT;\n    const startTime = Date.now();\n\n    if (true) { // USE CLOUD_ENDPOINT\n        // generate authTokens from the credentials:\n        const cloudToken = getPublisherAccessToken(livekitSetup.CloudAPIKey, livekitSetup.CloudSecretKey, livekitSetup.RovRoomName);\n        const cloudRoomClient = new RoomServiceClient(LIVEKIT_CLOUD_ENDPOINT, livekitSetup.CloudAPIKey, livekitSetup.CloudSecretKey)\n        await createLivekitRoom(cloudRoomClient, livekitSetup.RovRoomName);\n        await refreshMetadata(cloudRoomClient, livekitSetup);\n\n        await cloudLivekitConnection.start(livekitSetup.RovRoomName, cloudToken);\n        // setSendProxyMessageCallback((data) => {\n        //     console.log('sendProxyMessage', data);\n        //     cloudLivekitConnection.sendMessage(new Uint8Array(data))\n        // })\n        let cloudRoomList = await listLivekitRooms(cloudRoomClient);\n        console.log('cloud roomList', cloudRoomList);\n    } else {\n        // // generate authTokens from the credentials:\n        // const localToken = getPublisherAccessToken(livekitSetup.CloudAPIKey, livekitSetup.CloudSecretKey, livekitSetup.RovRoomName);\n        // const localRoomClient = new RoomServiceClient(LIVEKIT_LOCAL_ENDPOINT, livekitSetup.CloudAPIKey, livekitSetup.CloudSecretKey)\n        // await createLivekitRoom(localRoomClient, livekitSetup.RovRoomName);\n        // await refreshMetadata(localRoomClient, livekitSetup);\n\n        // await localLivekitConnection.start(livekitSetup.RovRoomName, localToken);\n        // let localRoomList = await listLivekitRooms(localRoomClient);\n        // console.log('local roomList', localRoomList);\n\n    }\n\n\n    return true;\n}\n\nexport function sendLivekitMessage(msg: Uint8Array) {\n    cloudLivekitConnection.sendMessage(msg);\n}\n","import { DECODE_TXT, ENCODE_TXT } from \"../../js/consts\";\nimport { waitfor } from \"../../js/util\";\nimport { getMyIpGeolocation } from \"./geolocation\";\nimport { connectToLivekit } from \"./livekitPublisher\";\nimport { initSimplePeerPublisher } from \"./simplePeerPub\";\n\nconst urlParams = new URLSearchParams(location.search);\nconnectToLivekit({\n    ForceLocal: (urlParams.get(\"ForceLocal\") || \"\").toLowerCase() === 'true',\n    RovRoomName: urlParams.get(\"RovRoomName\"),\n    CloudAPIKey: urlParams.get(\"CloudAPIKey\"),\n    CloudSecretKey: urlParams.get(\"CloudSecretKey\"),\n    LocalAPIKey: urlParams.get(\"LocalAPIKey\"),\n    LocalSecretKey: urlParams.get(\"LocalSecretKey\"),\n}).then(async () => {\n    console.log('connected?');\n    const stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: false,\n    });\n    initSimplePeerPublisher(stream);\n});\n\n// console.log(getFrontendAccessToken(urlParams.get(\"CloudAPIKey\"), urlParams.get(\"CloudSecretKey\"), \"PERSON\" + Date.now().toString()))\n\n\n\n// setSendProxyMessageCallback((data) => {\n//     console.log(\"Sending Msg Through proxy. JK! \", DECODE_TXT(data));\n// })\n// let msg = JSON.stringify({\n//     url: 'http://wow.com',\n//     body: new Array(...ENCODE_TXT(\"ALL\")),\n//     type: proxyMessageTypes.socketMsg\n// })\n// console.log(\"smg\", msg)\n// // await waitfor(5000);\n\n// msg = JSON.stringify({\n//     url: 'http://wow.com',\n//     body: new Array(...ENCODE_TXT(\"BO\")),\n//     type: proxyMessageTypes.socketMsg\n// })\n// console.log(\"smg\", msg)\n"],"names":["AccessToken","getPublisherAccessToken","apiKey","secretKey","rovName","token","simplePeerPub","initSimplePeerPublisher","mediaStream","SimplePeerConnection","handleBackendMsgRcvd","newState","signalData","sendLivekitMessage","sendSignalingDataToSimplePeerPublisher","msgBytes","data","LivekitPublisherConnection","hostUrl","onMesssageRecived","onConnStateChange","__publicField","msg","connState","Room","DefaultReconnectPolicy","VideoPresets","roomId","accessToken","startTime","RoomEvent","signalConnectionTime","appendLog","camResult","reason","p","participant","ParticipantEvent","pub","failure","MediaDeviceFailure","quality","person","DECODE_TXT","metadata","track","_","getWebsocketURL","LIVEKIT_BACKEND_ROOM_CONNECTION_CONFIG","onSendCallback","skipQueue","DataPacket_Kind","cloudLivekitConnection","LIVEKIT_CLOUD_ENDPOINT","state","LIVEKIT_LOCAL_ENDPOINT","connectToLivekit","livekitSetup","cloudToken","cloudRoomClient","cloudRoomList","urlParams","stream"],"mappings":"6UAGA,MAAMA,EAAc,WAAW,iBAAiB,YAShC,SAAAC,EAAwBC,EAAgBC,EAAmBC,EAAyB,CAChG,MAAMC,EAAQ,IAAIL,EAAYE,EAAQC,EAAW,CAC7C,SAAUC,EACV,IAAK,KAAA,CACR,EACD,OAAAC,EAAM,SAAS,CACX,KAAMD,EACN,SAAU,GACV,WAAY,GACZ,UAAW,GACX,SAAU,GACV,WAAY,GACZ,aAAc,GACd,eAAgB,EAAA,CACnB,EACMC,EAAM,OACjB,CCvBA,IAAIC,EAA6C,KACpC,MAAAC,EAA2BC,IAEpBF,EAAA,IAAIG,EAAqBC,EAAuBC,GAAqB,QAAQ,IAAI,6BAA8BA,CAAQ,EAAIC,GAAe,CACnIC,EAAA,IAAI,WAAWD,CAAU,CAAC,CAAA,CAChD,EACDN,EAAc,MAAM,CAChB,UAAW,GACX,QAAS,GACT,QAAS,CAACE,CAAW,CAAA,CACxB,EACMF,GAGEQ,EAA0CF,GAA2B,CAC1EN,GAAeA,EAAc,mBAAmBM,CAAU,CAClE,EClBO,SAASF,EAAqBK,EAA2B,CACxD,IAAAC,EAAO,IAAI,WAAWD,CAAQ,EAC9B,CAACC,GAAQA,EAAK,SAAW,IACrB,QAAA,IAAI,eAAgBA,CAAI,EAChCF,EAAuCE,CAAI,EAE/C,CCiCO,MAAMC,CAA2B,CAUpC,YAAYC,EAAiBC,EAAuCC,EAAwC,CAT5GC,EAAA,eACAA,EAAA,gBACAA,EAAA,oBACAA,EAAA,iBACAA,EAAA,kBAEAA,EAAA,0BACAA,EAAA,0BAGI,KAAK,QAAUH,EACV,KAAA,kBAAqBI,GAAoBH,EAAkBG,EAAK,KAAK,OAAQ,KAAK,OAAO,EACzF,KAAA,kBAAqBC,GAAsBH,EAAkBG,EAAW,KAAK,OAAQ,KAAK,OAAO,EAGjG,KAAA,SAAW,IAAIC,EAAK,CAGrB,gBAAiB,IAAIC,EAGrB,SAAU,GAGV,qBAAsB,CAClB,WAAYC,EAAa,MAAM,UAGnC,EAEA,gBAAiB,CACb,WAAY,MAChB,CAAA,CAEH,CACL,CAEA,MAAM,MAAMC,EAAgBC,EAAqB,CAC7C,QAAQ,IAAI,sBAAsBD,SAAc,KAAK,mBAAmBC,GAAa,EAC/E,MAAAC,EAAY,KAAK,MACvB,YAAK,OAASF,EAGd,KAAK,SACA,GAAGG,EAAU,gBAAiB,SAAY,CACjC,MAAAC,EAAuB,KAAK,IAAA,EAAQF,EAC1CG,EAAU,oCAAoCD,KAAwB,EACtE,IAAIE,EAAY,MAAM,KAAK,SAAS,iBAAiB,iBAAiB,EAAI,EAClE,QAAA,IAAI,aAAcA,CAAS,CACtC,CAAA,EACA,GAAGH,EAAU,UAAW,SAAY,CACvBE,EAAA,sBAAsB,KAAK,SAAS,MAAM,CACvD,CAAA,EACA,GAAGF,EAAU,aAAeI,GAA8B,CAClD,KAAK,WACVF,EAAU,yBAA0B,CAAE,OAAAE,CAAA,EAAU,KAAK,SAAS,gBAAgB,EAC9E,KAAK,SAAS,aAAa,QAASC,GAAM,CAAA,CAAG,EAChD,CAAA,EACA,GAAGL,EAAU,aAAc,IAAM,CAC9BE,EAAU,sBAAsB,CACnC,CAAA,EACA,GAAGF,EAAU,YAAa,SAAY,CACnCE,EACI,mCACA,MAAM,KAAK,SAAS,OAAO,0BAA0B,CAAA,CAE5D,CAAA,EACA,GAAGF,EAAU,qBAAsB,MAAOM,GAA6B,CACpEJ,EAAU,cAAeI,EAAY,SAAU,YAAaA,EAAY,QAAQ,EAChFA,EACK,GAAGC,EAAiB,WAAaC,GAA0B,CACxDN,EAAU,kBAAmBM,EAAI,SAAUF,EAAY,QAAQ,CAClE,CAAA,EACA,GAAGC,EAAiB,aAAeC,GAA0B,CAC1DN,EAAU,oBAAqBM,EAAI,SAAUF,EAAY,QAAQ,CACpE,CAAA,EACA,GAAGC,EAAiB,kBAAmB,IAAM,CAChCL,EAAA,qCAAsCI,EAAY,UAAU,CACzE,CAAA,EACA,GAAGC,EAAiB,yBAA0B,IAAM,CACvCL,EAAA,4CAA6CI,EAAY,iBAAiB,CAAA,CACvF,CACR,CAAA,EACA,GAAGN,EAAU,wBAA0BM,GAAmC,CAC7DJ,EAAA,cAAeI,EAAY,IAAK,cAAc,CAC3D,CAAA,EACA,GAAGN,EAAU,kBAAoB,GAAa,CACrC,MAAAS,EAAUC,EAAmB,WAAW,CAAC,EAC/CR,EAAU,uBAAwBO,CAAO,CAAA,CAC5C,EACA,GAAGT,EAAU,yBAA0B,CAACW,EAA4BL,IAA8B,CACrFJ,EAAA,6BAA8BI,GAAA,YAAAA,EAAa,SAAUK,CAAO,CAAA,CACzE,EACA,GAAGX,EAAU,aAAc,MAAOR,EAAiBc,IAAoC,CAC9E,MAAAM,EAASN,EAAcA,EAAY,SAAW,SAC1CJ,EAAA,yBAAyBU,SAAc,KAAK,WAAW,KAAK,SAAUC,EAAWrB,CAAG,CAAC,EAC/F,KAAK,kBAAkBA,EAAK,KAAK,OAAQ,KAAK,OAAO,CACxD,CAAA,EACA,GAAGQ,EAAU,oBAAsBc,GAAa,CAC7CZ,EAAU,wBAAyBY,CAAQ,CAC9C,CAAA,EACA,GAAGd,EAAU,oBAAqB,IAAM,CACrCE,EAAU,qBAAqB,CAAA,CAClC,EACA,GAAGF,EAAU,sBAAuB,CAACe,EAA8BT,IAAkC,CACxFJ,EAAA,4BAA6Ba,EAAOT,CAAW,CAAA,CAC5D,EACA,GAAGN,EAAU,oBAAqB,CAACe,EAA8BT,IAAkC,CACtFJ,EAAA,4BAA6Ba,EAAOT,CAAW,CAC5D,CAAA,EACA,GAAGN,EAAU,kBAAoB,GAAa,CACrC,MAAAS,EAAUC,EAAmB,WAAW,CAAC,EAC/CR,EAAU,uBAAwBO,CAAO,CAAA,CAC5C,EACA,GAAGT,EAAU,yBAA0B,CAACW,EAA4BL,IAA8B,CACrFJ,EAAA,6BAA8BI,GAAA,YAAAA,EAAa,SAAUK,CAAO,CAAA,CACzE,EACA,GAAGX,EAAU,gBAAiB,CAACe,EAAOP,EAAKF,IAAgB,CAExDJ,EAAU,2DAA6DM,EAAI,SAAUF,EAAY,QAAQ,CAAA,CAC5G,EACA,GAAGN,EAAU,kBAAmB,CAACgB,EAAGR,EAAKF,IAAgB,CAE5CJ,EAAA,+DAAiEM,EAAI,QAAQ,CAC1F,CAAA,EACA,GAAGR,EAAU,2BAA4B,IAAM,CAClCE,EAAA,kEAAoE,KAAK,SAAS,gBAAgB,CAAA,CAC/G,EAGC,MAAA,KAAK,SAAS,QAAQe,EAAgB,KAAK,OAAO,EAAGnB,EAAaoB,CAAsC,EAC9G,QAAQ,KAAK,oBAAqB,KAAK,SAAS,KAAM,KAAK,QAAQ,EAE5D,EACX,CAEA,YAAYjC,EAAsBkC,EAA6BC,EAAY,GAAO,CACtE,QAAA,IAAI,qCAAsCnC,CAAQ,EAC1D,KAAK,SAAS,iBAAiB,YAAYA,EAAUoC,EAAgB,QAAQ,CACjF,CAEA,OAAQ,CACJ,QAAQ,KAAK,+BAAgC,KAAK,OAAQ,KAAK,OAAO,EAClE,KAAK,UACA,KAAA,SAAS,WAAW,EAAI,CAErC,CACJ,CAIO,MAAMC,EAAyB,IAAInC,EAA2BoC,EAAwB,CAAC/B,EAAKK,EAAQT,IAAY,CACnHR,EAAqBY,CAAG,CAC5B,EAAG,CAACgC,EAAO3B,EAAQT,IAAY,CAC3B,QAAQ,IAAI,6BAA+BoC,EAAO3B,EAAQT,CAAO,CACrE,CAAC,EAGqC,IAAID,EAA2BsC,EAAwB,CAACjC,EAAKK,EAAQT,IAAY,CACnHR,EAAqBY,CAAG,CAC5B,EAAG,CAACgC,EAAO3B,EAAQT,IAAY,CAC3B,QAAQ,IAAI,6BAA+BoC,EAAO3B,EAAQT,CAAO,CACrE,CAAC,EAED,eAAsBsC,EAAiBC,EAAqD,CACxF,GAAI,CAACA,EAAa,aAAe,CAACA,EAAa,gBAAkB,CAACA,EAAa,YAAmB,MAAA,IAAI,MAAM,uDAAuD,EACxIA,EAAa,WAAaF,EAAyBF,EAGpE,CAEN,MAAMK,EAAazD,EAAwBwD,EAAa,YAAaA,EAAa,eAAgBA,EAAa,WAAW,EACpHE,EAAkB,IAAI,kBAAkBN,EAAwBI,EAAa,YAAaA,EAAa,cAAc,EACrH,MAAA,kBAAkBE,EAAiBF,EAAa,WAAW,EAC3D,MAAA,gBAAgBE,EAAiBF,CAAY,EAEnD,MAAML,EAAuB,MAAMK,EAAa,YAAaC,CAAU,EAKnE,IAAAE,EAAgB,MAAM,iBAAiBD,CAAe,EAClD,QAAA,IAAI,iBAAkBC,CAAa,CAY/C,CAGO,MAAA,EACX,CAEO,SAAS/C,EAAmBS,EAAiB,CAChD8B,EAAuB,YAAY9B,CAAG,CAC1C,CC/OA,MAAMuC,EAAY,IAAI,gBAAgB,SAAS,MAAM,EACrDL,EAAiB,CACb,YAAaK,EAAU,IAAI,YAAY,GAAK,IAAI,YAAW,IAAO,OAClE,YAAaA,EAAU,IAAI,aAAa,EACxC,YAAaA,EAAU,IAAI,aAAa,EACxC,eAAgBA,EAAU,IAAI,gBAAgB,EAC9C,YAAaA,EAAU,IAAI,aAAa,EACxC,eAAgBA,EAAU,IAAI,gBAAgB,CAClD,CAAC,EAAE,KAAK,SAAY,CAChB,QAAQ,IAAI,YAAY,EACxB,MAAMC,EAAS,MAAM,UAAU,aAAa,aAAa,CACrD,MAAO,GACP,MAAO,EACf,CAAK,EACDvD,EAAwBuD,CAAM,CAClC,CAAC"}